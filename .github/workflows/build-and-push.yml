# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Push Evrim UI to Amazon ECR

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 905418331516.dkr.ecr.us-east-1.amazonaws.com # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                              # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: evrim-ui                    # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          NUXT_EVRIM_API_URL: https://api.evrim.ai/prod
          NUXT_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NUXT_STRIPE_PUBLISHABLE_KEY }}
          NUXT_STRIPE_MANAGEMENT_URL: ${{ secrets.NUXT_STRIPE_MANAGEMENT_URL }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f Dockerfile -t $ECR_REPOSITORY/$CONTAINER_NAME:$IMAGE_TAG \
            --build-arg NUXT_EVRIM_API_URL=$NUXT_EVRIM_API_URL \
            --build-arg NUXT_STRIPE_PUBLISHABLE_KEY=$NUXT_STRIPE_PUBLISHABLE_KEY \
            --build-arg NUXT_STRIPE_MANAGEMENT_URL=$NUXT_STRIPE_MANAGEMENT_URL \
            .
          docker push $ECR_REPOSITORY/$CONTAINER_NAME:$IMAGE_TAG
          docker build -f Dockerfile -t $ECR_REPOSITORY/$CONTAINER_NAME:latest \
            --build-arg NUXT_EVRIM_API_URL=$NUXT_EVRIM_API_URL \
            --build-arg NUXT_STRIPE_PUBLISHABLE_KEY=$NUXT_STRIPE_PUBLISHABLE_KEY \
            --build-arg NUXT_STRIPE_MANAGEMENT_URL=$NUXT_STRIPE_MANAGEMENT_URL \
            .
          docker push $ECR_REPOSITORY/$CONTAINER_NAME:latest